workflow:
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: always
    
.common-config: &common-config
 - |
   git config --global user.name "${GITLAB_USER_NAME}"
   git config --global user.email "${GITLAB_USER_EMAIL}"  
   chart_file="Chart.yaml"
   chart_name=$(grep '^name:' Chart.yaml | awk '{print $2}')
   helm_user="helm"
   helm_repo_name="search-guard-flx-helm-charts"

   if [[ -z "${CI_PROJECT_ID}" ]]; then
     helm_project_id=261
   else
     helm_project_id="${CI_PROJECT_ID}"
   fi
      
   if [[ -z "${CI_SERVER_HOST}" ]]; then
    server_host=git.floragunn.com
   else
    server_host="${CI_SERVER_HOST}"
   fi
            
   helm_channel=stable
   helm_repo_url=https://${server_host}/api/v4/projects/$helm_project_id/packages/helm/$helm_channel 
   git remote set-url origin https://helm:$access_token@${server_host}/${CI_PROJECT_PATH}.git
   chart_version=$(grep '^version:' $chart_file | awk -F ': ' '{print $2}')
   if [ ! -f "$chart_file" ]; then
    echo "[ERROR] Chart file $chart_file not exist"
    exit 1
   fi 
   if helm repo list | grep -q "$helm_repo_name"; then
     helm repo remove $helm_repo_name
   fi    
          
   helm repo add --username $helm_user --password $access_token $helm_repo_name  $helm_repo_url
   helm repo update
           
      
image: 
  name: alpine/helm:3.18.3
  entrypoint: [""]   
  

variables:
  GIT_STRATEGY: clone   
  
stages:
  - Validate
  - Publish

validate_helm:
  tags:
    - build    
  stage: Validate
  script:

    - |
      set -e
      if ! helm template . > /dev/null 2>&1; then
          echo "[ERROR] Helm template cannot be rendered for default values"
          exit 1      
      fi
      for custom_value in $(find examples -name values.yaml) ; do
        if ! helm template . -f $custom_value > /dev/null 2>&1; then
          echo "[ERROR] Helm template cannot be rendered with $custom_value values"
          exit 1
        fi
      done
      echo "[INFO] Validation completed successfully"

validate_release:
  tags:
    - build  
  stage: Validate
  script:
    - *common-config  
    - |
      set -e
      if git tag -l | grep -q "^$chart_version$"; then
        echo "[ERROR] Tag for version $chart_version already exist"
        exit 1
      fi
      
      chart_exist=$(helm search repo  $helm_repo_name -o json --version $chart_version) 
      if [ ! "$chart_exist" == "[]" ]; then
       echo "[ERROR] Version $chart_version already exist in $helm_repo_url"
      fi
      
      echo "[INFO] Validation completed successfully"
publish_helm:
  needs:
    - validate_helm  
    - validate_release
  only:
    - bugfix/docker_registry  
  tags:
    - build  
  stage: Publish
  script:
    - *common-config  
    - |
      set -e
      if ! helm plugin list | grep -q "cm-push"; then
        helm plugin install https://github.com/chartmuseum/helm-push
      fi
      echo "[INFO] Executing helm package"
      helm package .  
      echo "[INFO] Executing helm cm-push"
      helm cm-push  $chart_name-$chart_version.tgz $helm_repo_name
      echo "[INFO] Published $chart_version version for $helm_repo_name"
                      
      # git tag "$chart_version-flx"
      # git push origin $chart_version-flx    
      # echo "[INFO] Published tags"
      # echo "[INFO] Completed successfully"


