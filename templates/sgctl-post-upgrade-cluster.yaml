{{- /*
    Copyright 2021 floragunn GmbH

    Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/}}

{{ if .Values.common.disable_sharding }}
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ template "searchguard.fullname" . }}-sgctl-postupgrade"
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "searchguard.fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
    component: {{ template "searchguard.fullname" . }}-sgctl
    role: sgctl
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": post-upgrade
    "helm.sh/hook-weight": "-1"
spec:
  template:
    metadata:
      name: {{ template "searchguard.fullname" . }}-sgctl-postupgrade"
      labels:
        release: "{{ .Release.Name }}"
        app: {{ template "searchguard.fullname" . }}
        component: {{ template "searchguard.fullname" . }}
        role: sgctl
    spec:
      restartPolicy: Never
      serviceAccountName: {{ template "searchguard.fullname" . }}
      containers:
      - name: sgctl-postupgrade
        env:
          - name: DISCOVERY_SERVICE
            value: {{ template "searchguard.fullname" . }}-discovery.{{ .Release.Namespace }}.svc
        image: {{ .Values.common.images.repository }}/{{ .Values.common.images.provider }}/{{ .Values.common.images.sgctl_base_image }}:{{ .Values.common.sgctl_version }}
        imagePullPolicy: {{ .Values.common.pullPolicy }}
        command:
          - bash
          - -c
          - |
              set -e
              while kubectl --namespace {{ .Release.Namespace }} get pods --selector=role=master -o jsonpath='{range .items[*]}{.status.containerStatuses[*]}{"\n"}{end}'|sed 's/"//g'|grep 'ready:false'; do
                echo "Wait for $DISCOVERY_SERVICE service to be ready";
                sleep 10 ;
              done
              echo "Getting password for admin user"
              export ADMIN_PWD=$(kubectl --namespace {{ .Release.Namespace }} get secrets {{ template "searchguard.fullname" . }}-passwd-secret -o jsonpath="{.data.SG_ADMIN_PWD}" | base64 -d)
              echo "Disabling shard allocation in ES cluster to https://{{ template "searchguard.fullname" . }}-clients.{{ .Release.Namespace }}.svc:9200 "
              curl --fail -u admin:$ADMIN_PWD -k -X PUT "https://{{ template "searchguard.fullname" . }}-clients.{{ .Release.Namespace }}.svc:9200/_cluster/settings?pretty" -H 'Content-Type: application/json' -d'
              {
              "persistent": {
                "cluster.routing.allocation.enable": "all",
                "cluster.routing.rebalance.enable" : "all"
              }
              }
              '
              RET=$?
              echo "Result $RET"
              exit $RET
        resources:
          limits:
            cpu: "500m"
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 256Mi
        volumeMounts:
          - name: secret-volume
            readOnly: true
            mountPath: /sgcerts/
          - name: kubectl
            subPath: kubectl
            mountPath: /usr/local/bin/kubectl
      volumes:
        - name: secret-volume
          secret:
            secretName: {{ template "searchguard.fullname" . }}-admin-cert-secret
        - name: kubectl
          emptyDir: {}
{{ end }}