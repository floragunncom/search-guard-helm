{{- /*
    Copyright 2021 floragunn GmbH

    Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/}}

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "searchguard.fullname" . }}-client
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "searchguard.fullname" . }}
    chart: "{{ .Chart.Name }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
    component: {{ template "searchguard.fullname" . }}-client
    role: client
spec:
  serviceName: {{ template "searchguard.fullname" . }}-client
  replicas: {{ .Values.client.replicas }}
  updateStrategy:
    type: OnDelete
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      component: {{ template "searchguard.fullname" . }}
      role: client
  template:
    metadata:
      labels:
        release: "{{ .Release.Name }}"
        app: {{ template "searchguard.fullname" . }}
        component: {{ template "searchguard.fullname" . }}
        role: client
        estype: node
        {{- if .Values.client.labels }}
{{ toYaml .Values.client.labels | indent 8 }}
        {{- end }}
      annotations:
        {{ if .Values.common.restart_pods_on_config_change }}
        checksum/config: {{ include (print $.Template.BasePath "/sg-static-configuration.yaml") . | sha256sum }}
        {{ end }}
      {{- if .Values.client.annotations }}
{{ toYaml .Values.client.annotations | indent 8 }}
      {{- end }}
    spec:
      subdomain: {{ template "searchguard.fullname" . }}
      serviceAccountName: {{ template "searchguard.fullname" . }}
      securityContext:
        fsGroup: 1000
      {{ if or .Values.client.nodeAffinity .Values.client.antiAffinity }}
      affinity:
      {{ if .Values.client.nodeAffinity }}
        nodeAffinity:
{{ toYaml .Values.client.nodeAffinity | indent 10 }}
      {{ end }}     
      {{ end }}      
      {{- if eq .Values.client.antiAffinity "hard" }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: "topology.kubernetes.io/zone"
              labelSelector:
                matchLabels:
                  component: {{ template "searchguard.fullname" . }}
                  role: client
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  component: {{ template "searchguard.fullname" . }}
                  role: client
      {{- else if eq .Values.client.antiAffinity "soft" }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: "topology.kubernetes.io/zone"
              labelSelector:
                matchLabels:
                  component: {{ template "searchguard.fullname" . }}
                  role: client
          - weight: 2
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  component: {{ template "searchguard.fullname" . }}
                  role: client
      {{- end }}
      {{ if .Values.client.tolerations }}
      tolerations:
{{ toYaml .Values.client.tolerations | indent 6 }}
      {{ end }}

      initContainers:
{{ include "searchguard.init-containers" . | indent 6 }}
      {{ if .Values.common.docker_registry.enabled }}
      imagePullSecrets:
      - name: {{ .Values.common.docker_registry.imagePullSecret }}
      {{ end }}
      containers:
      - name: elasticsearch
{{ include "searchguard.security-context.least" . | indent 8 }}        
      {{ if .Values.common.xpack_basic }}
        image: "{{ .Values.common.images.repository }}/{{ .Values.common.images.provider }}/{{ .Values.common.images.elasticsearch_base_image }}:{{ .Values.common.elkversion }}-{{ .Values.common.sgversion }}"
      {{ else }}
        image: "{{ .Values.common.images.repository }}/{{ .Values.common.images.provider }}/{{ .Values.common.images.elasticsearch_base_image }}:{{ .Values.common.elkversion }}-oss-{{ .Values.common.sgversion }}"
      {{ end }}
        lifecycle:
          postStart:
{{ include "searchguard.remove-demo-certs" . | indent 12 }}
{{ include "searchguard.recreate-node-certificates" . | indent 20 }}
          preStop:
{{ include "searchguard.lifecycle-cleanup-certs" . | indent 12 }}
        imagePullPolicy: {{ .Values.common.pullPolicy }}
        envFrom:
        - secretRef:
            name: {{ template "searchguard.fullname" . }}-passwd-secret
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: DISCOVERY_SERVICE
          value: {{ template "searchguard.fullname" . }}-discovery.{{ .Release.Namespace }}.svc
        - name: ES_JAVA_OPTS
          value: "-Djava.net.preferIPv4Stack=true -Xms{{ .Values.client.heapSize }} -Xmx{{ .Values.client.heapSize }}"
{{- if eq (include "searchguard.elk-version" .) "7" }}
        - name: NODE_DATA
          value: "false"
        - name: NODE_MASTER
          value: "false"
        - name: NODE_INGEST
          value: "true"
{{- else }}
        - name: NODE_ROLES
          value: "{{ join "," .Values.client.roles }}"
{{- end }}
        - name: PROCESSORS
          value: "{{ .Values.client.processors }}"
        {{- range $key, $value :=  .Values.common.env }}
        - name: {{ $key | upper | replace "-" "_" }}
          value: {{ $value | quote }}
        {{- end }}
        {{- range $key, $value :=  .Values.client.env }}
        - name: {{ $key | upper | replace "-" "_" }}
          value: {{ $value | quote }}
        {{- end }}
        ports:
        - containerPort: 9200
          name: http
          protocol: TCP
        - containerPort: 9300
          name: transport
          protocol: TCP
        livenessProbe:
          tcpSocket:
            port: transport
          initialDelaySeconds: 120
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /_searchguard/health
            port: http
            scheme: HTTPS
          initialDelaySeconds: 20
          timeoutSeconds: 10
          failureThreshold: 30
        resources:
{{ toYaml .Values.client.resources | indent 10 }}
        volumeMounts:
        - mountPath: /usr/share/elasticsearch/data
          name: storage
          subPath: data
        - mountPath: /usr/share/elasticsearch/logs
          name: storage
          subPath: logs
        - mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
          name: config
          subPath: elasticsearch.yml
        - mountPath: /usr/share/elasticsearch/plugins/search-guard-flx/sgconfig/
          name: searchguard-config
        - name: secret-volume
          readOnly: true
          mountPath: "/usr/share/elasticsearch/config/certificates-secrets"
        - name: kubectl
          subPath: kubectl
          mountPath: /usr/local/bin/kubectl
          readOnly: true
        - name: nodes-cert
          mountPath: /sg-nodes-certs
          readOnly: true
{{ if .Values.common.custom_elasticsearch_keystore.enabled }}
{{ include "searchguard.custom-elasticsearch-keystore-volumeMounts" . | indent 8 }}
{{ end }}
      volumes:
        - name: secret-volume
          secret:
            secretName: {{ template "searchguard.fullname" . }}-nodes-cert-secret
            defaultMode: 0644
        - configMap:
            name: {{ template "searchguard.fullname" . }}-config
          name: config
        - configMap:
            name: {{ template "searchguard.fullname" . }}-sg-dynamic-configuration
          name: searchguard-config
        - name: kubectl
          emptyDir: {}
        - name: nodes-cert
          emptyDir: {}
{{ if .Values.common.custom_elasticsearch_keystore.enabled }}
        - name: elasticsearch-keystore
          emptyDir: {}
{{ end }}
  volumeClaimTemplates:
    - metadata:
        name: storage
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: {{ .Values.client.storageClass }}
        resources:
          requests:
            storage: {{ .Values.client.storage }}
