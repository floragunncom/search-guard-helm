{{- /*
    Copyright 2021 floragunn GmbH

    Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "searchguard.fullname" . }}-sg-dynamic-configuration
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "searchguard.fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
data:
######## license_key.yml ########
{{ if not (eq .Values.common.license "none") }}
  license_key.yml: |-
    key: {{ .Values.common.license }}
{{ end }}

######## sg_auth_token_service.yml ########
  # sg_auth_token_service.yml : |-
  #   enabled: false
  #   jwt_signing_key_hs512: "..."
  #   jwt_encryption_key_a256kw: "..."   # Omit this to have unencrypted keys
  #   max_validity: "1y"                 # Omit this to have keys with unlimited lifetime
  #   max_tokens_per_user: 100 

######## sg_authc.yml ########
  sg_authc.yml: |-
    ---
{{ if .Values.common.authc }}
{{ toYaml .Values.common.authc | indent 4 }}
{{ else if not .Values.common.authc }}
    debug: false
    auth_domains:
    - type: basic/internal_users_db
{{ end }}

######## sg_authz.yml ########
  sg_authz.yml: |-
    ---
{{ if .Values.common.authz }}
{{ toYaml .Values.common.authz | indent 4 }}
{{ else if not .Values.common.authz }}
    debug: false
    ignore_unauthorized_indices.enabled: true
{{ end }}

######## sg_blocks.yml ########
  sg_blocks.yml: |-
    ---
    {}

######## sg_frontend_authc.yml ########
  sg_frontend_authc.yml: |-
    ---
    default:
      debug: false
      auth_domains:
      - type: basic
      - type: saml
        enabled: false
        label: "SAML Login"
        saml.idp.metadata_url: "https://your.idp.example.com/saml-metadata.xml"
        saml.idp.entity_id: urn:saml-metadata-entity-id
        saml.sp.entity_id: service-provider-id
        user_mapping.roles.from: saml_response.roles
      - type: oidc
        enabled: false
        label: "OIDC Login"
        oidc.client_id: "your-oidc-client-id"
        oidc.client_secret: "your-oidc-client-secret"
        oidc.idp.openid_configuration_url: "https://your.idp.example.com/auth/realms/master/.well-known/openid-configuration"
        user_mapping.roles.from: oidc_id_token.roles

######## sg_frontend_multi_tenancy.yml ########
  sg_frontend_multi_tenancy.yml: |-
    ---
    default:
      enabled: true
      index: .kibana
      server_user: kibanaserver

######## sg_roles.yml ########
  sg_roles.yml: |-
    ---
    # Define your own search guard roles here
    # or use the built-in search guard roles
    # See https://docs.search-guard.com/latest/roles-permissions
{{ if .Values.common.roles }}
{{ toYaml .Values.common.roles | indent 4 }}
{{ else }}
    {}
{{ end }}

######## sg_roles_mapping.yml ########
  sg_roles_mapping.yml: |-
    ---
    # Define your roles mapping here
    # See https://docs.search-guard.com/latest/mapping-users-roles

    ## Demo roles mapping

    SGS_ALL_ACCESS:
      reserved: true
      backend_roles:
      - "admin"
      description: "Maps admin to SGS_ALL_ACCESS"

    SGS_KIBANA_USER:
      reserved: false
      backend_roles:
      - "kibanauser"
      description: "Maps kibanauser to SGS_KIBANA_USER"

    SGS_READALL:
      reserved: true
      backend_roles:
      - "readall"

    SGS_KIBANA_SERVER:
      reserved: true
      users:
      - "kibanaserver"
{{ if .Values.common.rolesmapping }}
{{ toYaml .Values.common.rolesmapping | indent 4 }}
{{ end }}

######## sg_internal_users.yml ########
  sg_internal_users.yml: |-
    ---
    # This is the internal user database

    admin:
      reserved: true
      # Do not change the hash here!
      # It will be automatically replaced by auto generated password
      hash: ${envbc.SG_ADMIN_PWD}
      backend_roles:
        - admin
 
    kibanaserver:
      reserved: true
      # Do not change the hash here!
      # It will be automatically replaced by auto generated password
      hash: ${envbc.SG_KIBANASERVER_PWD}

    kibanaro: 
      reserved: true
      # Do not change the hash here!
      # It will be automatically replaced by auto generated password
      hash: ${envbc.SG_KIBANARO_PWD}
      backend_roles:
        - kibanauser
        - readall
{{ if .Values.common.users }}
{{ toYaml .Values.common.users | indent 4 }}
{{ end }}

######## sg_action_groups.yml ########
  sg_action_groups.yml: |-
    ---
    # Define your own action groups here
    # or use the built-in groups
    # See https://docs.search-guard.com/latest/action-groups
    {}

######## sg_tenants.yml ########
  sg_tenants.yml: |-
    ---
    # Define your tenants here
    # See https://docs.search-guard.com/latest/kibana-multi-tenancy
    {}