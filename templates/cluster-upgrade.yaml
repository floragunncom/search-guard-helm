{{- $dataValues := .Values.data }} 
{{- if not (kindIs "slice" .Values.data) }}
{{- $dataValues = list (merge (dict "name" "data") .Values.data) }}
{{- end }}
{{- $dataReplicas:=0 }}
{{- range $dataValues  }}
{{ $dataReplicas = add $dataReplicas .replicas }}
{{- end }}

{{- $clientValues := .Values.client }} 
{{- if not (kindIs "slice" .Values.client) }}
{{- $clientValues = list (merge (dict "name" "client") .Values.client) }}
{{- end }}
{{- $clientReplicas:=0 }}
{{- range $clientValues  }}
{{ $clientReplicas = add $clientReplicas .replicas }}
{{- end }}

{{- $kibanaValues := .Values.kibana }} 
{{- if not (kindIs "slice" .Values.kibana) }}
{{- $kibanaValues = list (merge (dict "name" "kibana") .Values.kibana) }}
{{- end }}
{{- $kibanaReplicas:=0 }}
{{- range $kibanaValues  }}
{{ $kibanaReplicas = add $kibanaReplicas .replicas }}
{{- end }}

{{- $masterValues := .Values.master }} 
{{- if not (kindIs "slice" .Values.master) }}
{{- $masterValues = list (merge (dict "name" "master") .Values.master) }}
{{- end }}
{{- $masterReplicas:=0 }}
{{- range $masterValues  }}
{{ $masterReplicas = add $masterReplicas .replicas }}
{{- end }}


{{- $signalsValues := .Values.signals | default (list) }} 
{{- if and (not (kindIs "slice" .Values.signals)) (hasKey .Values "signals") }}
{{- $signalsValues = list (merge (dict "name" "signals") .Values.signals) }}
{{- end }}
{{- $signalsReplicas:=0 }}
{{- range $signalsValues  }}
{{ $signalsReplicas = add $signalsReplicas .replicas }}
{{- end }}


{{- $dataContentValues := .Values.dataContent | default (list) }} 
{{- if and (not (kindIs "slice" .Values.dataContent)) (hasKey .Values "dataContent") }}
{{- $dataContentValues = list (merge (dict "name" "dataContent") .Values.dataContent) }}
{{- end }}
{{- $dataContentReplicas:=0 }}
{{- range $dataContentValues  }}
{{ $dataContentReplicas = add $dataContentReplicas .replicas }}
{{- end }}

---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ template "searchguard.fullname" . }}-cluster-upgrade"
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "searchguard.fullname" . }}
    chart: "{{ .Chart.Name }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
    role: sgctl
  annotations:
    "helm.sh/hook": post-upgrade
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
spec:
  backoffLimit: 6
  template:
    metadata:
      name: "{{ template "searchguard.fullname" . }}-cluster-upgrade"
      labels:
        release: "{{ .Release.Name }}"
        app: {{ template "searchguard.fullname" . }}
        component: {{ template "searchguard.fullname" . }}
        role: sgctl
    spec:
      restartPolicy: OnFailure
      serviceAccountName: {{ template "searchguard.fullname" . }}
      securityContext:
        fsGroup: 1000
      {{ if .Values.common.docker_registry.enabled }}
      imagePullSecrets:
      - name: {{ .Values.common.docker_registry.imagePullSecret }}
      {{ end }}
      {{ if .Values.common.tolerations }}
      tolerations:
{{ toYaml .Values.common.tolerations | indent 6 }}
      {{ end }}
      {{ if .Values.common.nodeAffinity }}
      affinity:
        nodeAffinity:
{{ toYaml .Values.common.nodeAffinity | indent 10 }}
      {{ end }}
      initContainers:
{{ include "searchguard.kubectl-init-container" . | indent 8 }}
      containers:
        - name: cluster-upgrade
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
            runAsNonRoot: true
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
          env:
          - name: DISCOVERY_SERVICE
            value: {{ template "searchguard.fullname" . }}-discovery.{{ .Release.Namespace }}.svc
{{ include "searchguard.kubectl-image" . | indent 10 }}
          resources:
            limits:
              cpu: 250m
              memory: 128Mi
            requests:
              cpu: 250m
              memory: 128Mi
          volumeMounts:
            - name: secret-volume
              readOnly: true
              mountPath: /sgcerts/
            - name: kubectl
              subPath: kubectl
              mountPath: /usr/local/bin/kubectl
              readOnly: true
          imagePullPolicy: {{ .Values.common.pullPolicy }}
          command:
            - /bin/bash
            - -c
            - |
                set -e
                echo "Upgrade to Helm Release Version {{ .Release.Revision }}"
                {{- $totalReplicas := add $masterReplicas $dataReplicas $clientReplicas $signalsReplicas  }}
                {{- if .Values.datacontent.enabled }}
                  {{- $totalReplicas = add $totalReplicas .Values.datacontent.replicas }}
                {{- end }}
            

                while kubectl --namespace {{ .Release.Namespace }} get pods --selector=role=master -o jsonpath='{range .items[*]}{.status.containerStatuses[*]}{"\n"}{end}'|sed 's/"//g'|grep 'ready:false'; do
                  echo "Wait for $DISCOVERY_SERVICE service to be ready";
                  sleep 10 ;
                done   
        
                echo "Wait until {{ $totalReplicas }} node are up and the cluster is at least yellow"

                curl --fail -Ss --cert /sgcerts/crt.pem --key /sgcerts/key.pem --cacert /sgcerts/root-ca.pem "https://$DISCOVERY_SERVICE:9200/_cluster/health?wait_for_nodes={{ $totalReplicas }}&wait_for_status=yellow&timeout=300s&pretty"

                function waitForStatefulSet() {
                  STS_NAME="$1"
                  
                  STATUS_JSON="$(kubectl rollout history statefulset/${STS_NAME} -n {{ .Release.Namespace }} -o=jsonpath='{.status}' --revision=1)"
                  RR="$(echo "$STATUS_JSON" | jq '.readyReplicas // 0' | tr -d '"')"
                  REPLICAS="$(echo "$STATUS_JSON" | jq '.replicas' | tr -d '"')"
                  CR="$(echo "$STATUS_JSON" | jq '.currentRevision' | tr -d '"')"
                  UR="$(echo "$STATUS_JSON" | jq '.updateRevision' | tr -d '"')"

                  while [ "$RR" != "$REPLICAS" ] || [ "$CR" != "$UR" ]; do
                    echo "$RR out of $REPLICAS replicas are ready for ${STS_NAME}, wait ... ($CR/$UR)"
                    sleep 3
                    STATUS_JSON="$(kubectl rollout history statefulset/${STS_NAME} -n {{ .Release.Namespace }} -o=jsonpath='{.status}' --revision=1)"
                    RR="$(echo "$STATUS_JSON" | jq '.readyReplicas // 0' | tr -d '"')"
                    REPLICAS="$(echo "$STATUS_JSON" | jq '.replicas' | tr -d '"')"
                    CR="$(echo "$STATUS_JSON" | jq '.currentRevision' | tr -d '"')"
                    UR="$(echo "$STATUS_JSON" | jq '.updateRevision' | tr -d '"')"
                    

                    # This a workaround for https://git.floragunn.com/search-guard/search-guard-suite-enterprise/-/issues/148
                    # and can be removed if the issue is fixed.

                    echo ""
                    curl -Ss --cert /sgcerts/crt.pem --key /sgcerts/key.pem --cacert /sgcerts/root-ca.pem -XPUT "https://$DISCOVERY_SERVICE:9200/_cluster/settings" -H 'content-type: application/json' -d '
                    {
                      "transient": {
                        "logger.dummy.dummy": "ERROR"
                      }
                    }'
                    echo ""
                    curl -Ss --cert /sgcerts/crt.pem --key /sgcerts/key.pem --cacert /sgcerts/root-ca.pem -XPUT "https://$DISCOVERY_SERVICE:9200/_cluster/settings" -H 'content-type: application/json' -d '
                    {
                      "transient": {
                        "logger.dummy.dummy": null
                      }
                    }'
                    echo ""
                    # end workaround

                  done

                  echo "$RR out of $REPLICAS replicas are ready for ${STS_NAME}, proceed ..."

                
                }

                function updateIfRequired() {

                  SETNAME="$1"
                  for STS_NAME in $(kubectl get sts --no-headers -o custom-columns=":metadata.name" -l role=${SETNAME},app={{ template "searchguard.fullname" . }},chart={{ .Chart.Name }} -n {{ .Release.Namespace }})
                    do
                      # check if we need to update the stateful set
                      # this is the case when .status.currentRevision != .status.updateRevision
                      STATUS_JSON="$(kubectl rollout history statefulset/${STS_NAME} -n {{ .Release.Namespace }} -o=jsonpath='{.status}' --revision=1)"
                      CR="$(echo "$STATUS_JSON" | jq '.currentRevision' | tr -d '"')"
                      UR="$(echo "$STATUS_JSON" | jq '.updateRevision' | tr -d '"')"

                      if [ "$CR" != "$UR" ]; then
                        echo "Update needed for $SETNAME/${STS_NAME} because currentRevision $CR does not match updateRevision $UR"
                        echo "$STATUS_JSON"
                        
                        if [ "$SETNAME" == "kibana" ]; then
                          KIBANA_REPLICAS=$(kubectl get statefulset/${STS_NAME} -n {{ .Release.Namespace }} -o jsonpath='{.status.replicas}')
                          echo "Current number of replicas for ${SETNAME}/${STS_NAME} = $KIBANA_REPLICAS"
                          kubectl scale --replicas=1 statefulset/${STS_NAME} -n {{ .Release.Namespace }}
                        fi

                        kubectl patch statefulset/${STS_NAME} -n {{ .Release.Namespace }} -p '{"spec":{"updateStrategy":{"type":"RollingUpdate"}}}'
                        waitForStatefulSet "${STS_NAME}"
                        
                        if [ "$SETNAME" == "kibana" ]; then
                          kubectl scale --replicas=${KIBANA_REPLICAS} statefulset/${STS_NAME} -n {{ .Release.Namespace }}
                        fi
                        
                        kubectl patch statefulset/${STS_NAME} -n {{ .Release.Namespace }} -p '{"spec":{"updateStrategy":{"type":"OnDelete"}}}'
                      else
                        echo "No Update needed for ${SETNAME}/${STS_NAME}"
                      fi
                  done    

                }
                
                updateIfRequired "client"
                {{- if gt $signalsReplicas 0 }}
                updateIfRequired "signals"
                {{- end }}
                updateIfRequired "data"
                {{- if .Values.datacontent.enabled }}
                updateIfRequired "data-content"
                {{- end  }}                     
                updateIfRequired "master"
                {{- if gt $kibanaReplicas 0 }}
                updateIfRequired "kibana"
                {{- end }}

                echo "Cluster ugrade finished"
                exit 0
      volumes:
        - name: secret-volume
          secret:
            secretName: {{ template "searchguard.fullname" . }}-admin-cert-secret
        - name: kubectl
          emptyDir: {}
