{{- /*
    Copyright 2021 floragunn GmbH

    Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/}}

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "searchguard.fullname" . }}-kibana
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "searchguard.fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
    component: {{ template "searchguard.fullname" . }}-kibana
    role: kibana
spec:
  serviceName: {{ template "searchguard.fullname" . }}-kibana
  replicas: {{ .Values.kibana.replicas }}
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      component: {{ template "searchguard.fullname" . }}
      role: kibana
  template:
    metadata:
      labels:
        release: "{{ .Release.Name }}"
        app: {{ template "searchguard.fullname" . }}
        component: {{ template "searchguard.fullname" . }}
        role: kibana
        {{- if .Values.kibana.labels }}
{{ toYaml .Values.kibana.labels | indent 8 }}
        {{- end }}
      annotations:
        {{ if .Values.common.restart_pods_on_config_change }}
        checksum/config: {{ include (print $.Template.BasePath "/kibana-configmap.yaml") . | sha256sum }}
        {{ end }}
      {{- if .Values.kibana.annotations }}
{{ toYaml .Values.kibana.annotations | indent 8 }}
      {{- end }}
    spec:
      subdomain: {{ template "searchguard.fullname" . }}
      serviceAccountName: {{ template "searchguard.fullname" . }}
      securityContext:
        fsGroup: 1000
      {{- if eq .Values.kibana.antiAffinity "hard" }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "topology.kubernetes.io/zone"
              labelSelector:
                matchLabels:
                  component: {{ template "searchguard.fullname" . }}
                  role: kibana
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  component: {{ template "searchguard.fullname" . }}
                  role: kibana
      {{- else if eq .Values.kibana.antiAffinity "soft" }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: "topology.kubernetes.io/zone"
              labelSelector:
                matchLabels:
                  component: {{ template "searchguard.fullname" . }}
                  role: kibana
          - weight: 2
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  component: {{ template "searchguard.fullname" . }}
                  role: kibana
      {{- end }}
      initContainers:
        - name: init-kubectl-0 #doubled, we need a better solution
        {{ include "searchguard.kubectl-image" . | indent 2 }}
          imagePullPolicy: {{ .Values.common.pullPolicy }}
          volumeMounts:
          - name: kubectl
            mountPath: /data
          command: ["cp", "/usr/bin/kubectl", "/data/kubectl"]
        - name: kibana-init
          image: {{ .Values.common.images.repository }}/{{ .Values.common.images.provider }}/{{ .Values.common.images.sgctl_base_image }}:{{ .Values.common.sgctl_version }}
          imagePullPolicy: {{ .Values.common.pullPolicy }}
          volumeMounts:
            - name: kubectl
              subPath: kubectl
              mountPath: /usr/local/bin/kubectl
              readOnly: true
          command:
            - bash
            - -c
            - |
                set -e
                until kubectl --namespace {{ .Release.Namespace }} get secrets {{ template "searchguard.fullname" . }}-passwd-secret; do
                  echo 'Wait for {{ template "searchguard.fullname" . }}-passwd-secret';
                  sleep 10 ;
                done

                echo "OK, {{ template "searchguard.fullname" . }}-passwd-secret exists now"

          resources:
            limits:
              cpu: "500m"
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 256Mi
{{ include "searchguard.generate-certificates-init-container" . | indent 8 }}
        {{ if .Values.common.es_upgrade_order }}
{{ include "searchguard.kibana-wait-container" . | indent 8 }}
        {{ end }}
      {{ if .Values.common.docker_registry.enabled }}
      imagePullSecrets:
      - name: {{ .Values.common.docker_registry.imagePullSecret }}
      {{ end }}
      containers:
      - name: kibana
        securityContext:
          capabilities:
            add:
              - IPC_LOCK
              - SYS_RESOURCE
      {{ if .Values.common.xpack_basic }}
        image: "{{ .Values.common.images.repository }}/{{ .Values.common.images.provider }}/{{ .Values.common.images.kibana_base_image }}:{{ .Values.common.elkversion }}-{{ .Values.common.sgkibanaversion }}"
      {{ else }}
        image: "{{ .Values.common.images.repository }}/{{ .Values.common.images.provider }}/{{ .Values.common.images.kibana_base_image }}:{{ .Values.common.elkversion }}-oss-{{ .Values.common.sgkibanaversion }}"
      {{ end }}
        imagePullPolicy: {{ .Values.common.pullPolicy }}
        lifecycle:
          postStart:
{{ include "searchguard.remove-demo-certs" . | indent 12 }}
          preStop:
{{ include "searchguard.lifecycle-cleanup-certs" . | indent 12 }}
        envFrom:
        - secretRef:
            name: {{ template "searchguard.fullname" . }}-passwd-secret
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: DISCOVERY_SERVICE
          value: {{ template "searchguard.fullname" . }}-clients.{{ .Release.Namespace }}.svc
        {{- range $key, $value :=  .Values.common.env }}
        - name: {{ $key | upper | replace "-" "_" }}
          value: {{ $value | quote }}
        {{- end }}
        {{- range $key, $value :=  .Values.kibana.env }}
        - name: {{ $key | upper | replace "-" "_" }}
          value: {{ $value | quote }}
        {{- end }}
        ports:
        - containerPort: 5601
          name: http
          protocol: TCP
        livenessProbe:
          exec:
            command:
              - pgrep
              - node
          initialDelaySeconds: 60
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: api/status
            port: http
            scheme: HTTPS
          initialDelaySeconds: 60
          timeoutSeconds: 5
        resources:
{{ toYaml .Values.kibana.resources | indent 10 }}
        volumeMounts:
        - mountPath: /storage/
          name: storage
        - mountPath: /usr/share/kibana/config/kibana.yml
          name: config
          subPath: kibana.yml
        - name: certificates-secrets-volume
          readOnly: true
          mountPath: "/usr/share/kibana/config/certificates-secrets"
        - name: kubectl
          subPath: kubectl
          mountPath: /usr/local/bin/kubectl
          readOnly: true
      volumes:
        - name: certificates-secrets-volume
          secret:
            secretName: {{ template "searchguard.fullname" . }}-nodes-cert-secret
            defaultMode: 0644
        - configMap:
            name: {{ template "searchguard.fullname" . }}-kibana-config
          name: config
        - name: kubectl
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: storage
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: {{ .Values.kibana.storageClass }}
        resources:
          requests:
            storage: {{ .Values.kibana.storage }}