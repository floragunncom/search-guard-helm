{{- /*
    Includes code from the following Apache 2 licensed projects:

      - https://github.com/lalamove/helm-elasticsearch

        Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/}}
{{- if .Values.datacontent.enabled }}

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "searchguard.fullname" . }}-data-content
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "searchguard.fullname" . }}
    chart: "{{ .Chart.Name }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
    component: {{ template "searchguard.fullname" . }}
    role: data-content
spec:
  serviceName: {{ template "searchguard.fullname" . }}-data-content
  replicas: {{ .Values.datacontent.replicas }}
  updateStrategy:
    type: OnDelete
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      component: {{ template "searchguard.fullname" . }}
      role: data-content
  template:
    metadata:
      labels:
        release: "{{ .Release.Name }}"
        app: {{ template "searchguard.fullname" . }}
        component: {{ template "searchguard.fullname" . }}
        role: data-content
        estype: node
        {{- if .Values.datacontent.labels }}
{{ toYaml .Values.datacontent.labels | indent 8 }}
        {{- end }}
      annotations:
        {{ if .Values.common.restart_pods_on_config_change }}
        checksum/config: {{ include (print $.Template.BasePath "/sg-static-configuration.yaml") . | sha256sum }}
        {{ end }}
      {{- if .Values.datacontent.annotations }}
{{ toYaml .Values.datacontent.annotations | indent 8 }}
      {{- end }}
    spec:
      subdomain: {{ template "searchguard.fullname" . }}
      serviceAccountName: {{ template "searchguard.fullname" . }}
      securityContext:
        fsGroup: 1000
      {{ if or .Values.datacontent.nodeAffinity .Values.datacontent.antiAffinity }}
      affinity:
      {{ if .Values.datacontent.nodeAffinity }}
        nodeAffinity:
{{ toYaml .Values.datacontent.nodeAffinity | indent 10 }}
      {{ end }}     
      {{ end }}    
      {{- if eq .Values.datacontent.antiAffinity "hard" }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  component: {{ template "searchguard.fullname" . }}
                  role: data-content
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: "topology.kubernetes.io/zone"
              labelSelector:
                matchLabels:
                  component: {{ template "searchguard.fullname" . }}
                  role: data-content
      {{- else if eq .Values.datacontent.antiAffinity "soft" }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: "topology.kubernetes.io/zone"
              labelSelector:
                matchLabels:
                  component: {{ template "searchguard.fullname" . }}
                  role: data-content
          - weight: 2
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  component: {{ template "searchguard.fullname" . }}
                  role: data-content
      {{- end }}
      {{ if .Values.datacontent.tolerations }}
      tolerations:
{{ toYaml .Values.datacontent.tolerations | indent 6 }}
      {{ end }}
      initContainers:
{{ include "searchguard.init-containers" . | indent 6 }}
      {{ if .Values.common.docker_registry.enabled }}
      imagePullSecrets:
      - name: {{ .Values.common.docker_registry.imagePullSecret }}
      {{ end }}
      containers:
      - name: elasticsearch
      {{ if .Values.common.xpack_basic }}
        image: "{{ .Values.common.images.repository }}/{{ .Values.common.images.provider }}/{{ .Values.common.images.elasticsearch_base_image }}:{{ .Values.common.elkversion }}-{{ .Values.common.sgversion }}"
      {{ else }}
        image: "{{ .Values.common.images.repository }}/{{ .Values.common.images.provider }}/{{ .Values.common.images.elasticsearch_base_image }}:{{ .Values.common.elkversion }}-oss-{{ .Values.common.sgversion }}"
      {{ end }}
        imagePullPolicy: {{ .Values.common.pullPolicy }}
        lifecycle:
          postStart:
{{ include "searchguard.remove-demo-certs" . | indent 12 }}
{{ include "searchguard.recreate-node-certificates" . | indent 20 }}

                    function try_loop {
                        for (( c=1; c<=100; c++ )); do \
                            eval $@ && exit_code=0 && break || exit_code=$? && echo "Retry $c in 5s" && \
                            sleep 5; \
                            done; \
                            (exit $exit_code)
                    }

                    
                    try_loop nc -z $DISCOVERY_SERVICE 9300
                    try_loop nc -z $DISCOVERY_SERVICE 9200
                    
                    curl --cert /sgcerts/crt.pem --key /sgcerts/key.pem --cacert /sgcerts/root-ca.pem "https://$DISCOVERY_SERVICE:9200/_cluster/health?wait_for_status=yellow&timeout=300s&pretty" > /tmp/poststart 2>&1 || true

                    try_loop nc -z $HOSTNAME 9200

                    curl --cert /sgcerts/crt.pem --key /sgcerts/key.pem --cacert /sgcerts/root-ca.pem -X PUT "https://$HOSTNAME:9200/_cluster/settings?pretty" -H 'Content-Type: application/json' -d'
                    {
                      "persistent": {
                        "cluster.routing.allocation.enable": null
                      }
                    }
                    ' >> /tmp/poststart 2>&1 || true

          preStop:
{{ include "searchguard.lifecycle-cleanup-certs" . | indent 12 }}

                    curl -Ss --cert /sgcerts/crt.pem --key /sgcerts/key.pem --cacert /sgcerts/root-ca.pem -X PUT "https://$HOSTNAME:9200/_cluster/settings?pretty" -H 'Content-Type: application/json' -d'
                    {
                      "persistent": {
                        "cluster.routing.allocation.enable": "primaries"
                      }
                    }
                    ' #>> "/storage/prestop/$HOSTNAME" 2>&1 || true

                    curl -Ss --cert /sgcerts/crt.pem --key /sgcerts/key.pem --cacert /sgcerts/root-ca.pem -X POST "https://$HOSTNAME:9200/_flush/synced?pretty" #>> "/storage/prestop/$HOSTNAME" 2>&1 || true

{{ include "searchguard.security-context.least" . | indent 8 }}
        envFrom:
        - secretRef:
            name: {{ template "searchguard.fullname" . }}-passwd-secret
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: DISCOVERY_SERVICE
          value: {{ template "searchguard.fullname" . }}-discovery.{{ .Release.Namespace }}.svc
        - name: ES_JAVA_OPTS
          value: "-Djava.net.preferIPv4Stack=true -Xms{{ .Values.datacontent.heapSize }} -Xmx{{ .Values.datacontent.heapSize }}"
        - name: NODE_ROLES
          value: "{{ join "," .Values.datacontent.roles }}"
{{- if eq (include "searchguard.elk-version" .) "7" }}
        - name: PROCESSORS
          value: "{{ .Values.datacontent.processors }}"
{{ end }}  
        {{- range $key, $value :=  .Values.common.env }}
        - name: {{ $key | upper | replace "-" "_" }}
          value: {{ $value | quote }}
        {{- end }}
        {{- range $key, $value :=  .Values.datacontent.env }}
        - name: {{ $key | upper | replace "-" "_" }}
          value: {{ $value | quote }}
        {{- end }}
        ports:
        - containerPort: 9300
          name: transport
          protocol: TCP
        - containerPort: 9200
          name: http
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /_searchguard/health
            port: http
            scheme: HTTPS
          initialDelaySeconds: 20
          periodSeconds: 10
          failureThreshold: 30
        livenessProbe:
          tcpSocket:
            port: transport
          initialDelaySeconds: 120
          periodSeconds: 10
        resources:
{{ toYaml .Values.datacontent.resources | indent 10 }}
        volumeMounts:
        - mountPath: /usr/share/elasticsearch/data
          name: storage
          subPath: data
        - mountPath: /usr/share/elasticsearch/logs
          name: storage
          subPath: logs
        - mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
          name: config
          subPath: elasticsearch.yml
        - mountPath: /usr/share/elasticsearch/plugins/search-guard-flx/sgconfig/
          name: searchguard-config
        - name: secret-volume
          readOnly: true
          mountPath: "/usr/share/elasticsearch/config/certificates-secrets"
        - name: kubectl
          subPath: kubectl
          mountPath: /usr/local/bin/kubectl
          readOnly: true
        - name: secret-volume-admin-cert
          readOnly: true
          mountPath: /sgcerts/
        - name: nodes-cert
          mountPath: /sg-nodes-certs
          readOnly: true
      volumes:
        - name: secret-volume
          secret:
            secretName: {{ template "searchguard.fullname" . }}-nodes-cert-secret
            defaultMode: 0644
        - configMap:
            name: {{ template "searchguard.fullname" . }}-config
          name: config
        - configMap:
            name: {{ template "searchguard.fullname" . }}-sg-dynamic-configuration
          name: searchguard-config
        - name: kubectl
          emptyDir: {}
        - name: secret-volume-admin-cert
          secret:
            secretName: {{ template "searchguard.fullname" . }}-admin-cert-secret
        - name: nodes-cert
          emptyDir: {}    
  volumeClaimTemplates:
  - metadata:
      name: storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ .Values.datacontent.storageClass }}
      resources:
        requests:
          storage: {{ .Values.datacontent.storage }}

{{ end }}