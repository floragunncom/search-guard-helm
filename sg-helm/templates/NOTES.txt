The Search Guard protected elasticsearch cluster has been installed.

Elasticsearch can be accessed:

  * Within your cluster, at the following DNS name at port 9200:

    https://{{ template "fullname" . }}-clients.{{ .Release.Namespace }}.svc:9200

  * From outside the cluster, run these commands in the same shell:
    {{- if contains "NodePort" .Values.common.serviceType }}

    #NodePort
    export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ template "fullname" . }}-clients)
    export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
    echo https://$NODE_IP:$NODE_PORT
    {{- else if contains "LoadBalancer" .Values.common.serviceType }}

     WARNING: You have likely exposed your Elasticsearch cluster direct to the internet.
              Make sure Search Guard is properly configured.

     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get svc -w {{ template "fullname" . }}'

    #LoadBalancer
    export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ template "fullname" . }}-clients -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
    echo https://$SERVICE_IP:9200
    {{- else if contains "ClusterIP"  .Values.common.serviceType }}

    #ClusterIP
    export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "component={{ template "fullname" . }},role=client" -o jsonpath="{.items[0].metadata.name}")
    echo "Visit https://127.0.0.1:9200 to use Elasticsearch"
    kubectl port-forward --namespace {{ .Release.Namespace }} $POD_NAME 9200:9200

    {{- else if contains "true"  .Values.common.ingressNginx.enabled }}

    #Ingress Nginx

    #For Cloud providers:
    export INGRESS_ADDRESS=$(kubectl get ing --namespace default sg-elk-sg-helm-ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')

    #For minikube:
    export INGRESS_ADDRESS=$(kubectl get ing --namespace default sg-elk-sg-helm-ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].ip}')

    echo "Add IP of $INGRESS_ADDRESS to records to DNS as kibana.example.com"
    echo "Access https://kibana.example.com"

    {{- end }}


Kibana can be accessed:

  * Within your cluster, at the following DNS name at port 5601:

    https://{{ template "fullname" . }}.{{ .Release.Namespace }}.svc:5601

  * From outside the cluster, run these commands in the same shell:
    {{- if contains "NodePort" .Values.kibana.serviceType }}

    #NodePort
    export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ template "fullname" . }})
    export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
    echo https://$NODE_IP:$NODE_PORT
    {{- else if contains "LoadBalancer" .Values.kibana.serviceType }}

     WARNING: You have likely exposed your Kibana direct to the internet.
              Make sure Search Guard is properly configured.

     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get svc -w {{ template "fullname" . }}'

    #LoadBalancer
    export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ template "fullname" . }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
    echo https://$SERVICE_IP:5601
    {{- else if contains "ClusterIP"  .Values.kibana.serviceType }}

    #ClusterIP
    export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "component={{ template "fullname" . }},role=kibana" -o jsonpath="{.items[0].metadata.name}")
    echo "Visit https://127.0.0.1:5601 to use Kibana"
    kubectl port-forward --namespace {{ .Release.Namespace }} $POD_NAME 5601:5601

    export INGRESS_ADDRESS=$(kubectl get ing --namespace default sg-elk-sg-helm-ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
    echo "Add records to DNS: $INGRESS_ADDRESS -> kibana.example.com"
    echo "Access https://kibana.example.com"

    {{- end }}
