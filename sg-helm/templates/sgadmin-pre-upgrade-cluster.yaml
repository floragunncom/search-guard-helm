{{ if .Values.common.disable_sharding }}
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ template "fullname" . }}-sgadmin-preupgrade"
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
    component: {{ template "fullname" . }}-sgadmin
    role: sgadmin
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: "{{ template "fullname" . }}-sgadmin-preupgrade"
      labels:
        release: "{{ .Release.Name }}"
        app: {{ template "fullname" . }}
        component: {{ template "fullname" . }}
        role: sgadmin
    spec:
      restartPolicy: Never
      serviceAccountName: {{ template "fullname" . }}
      containers:
      - name: sgadmin-preupgrade
        env:
          - name: DISCOVERY_SERVICE
            value: {{ template "fullname" . }}-discovery.{{ .Release.Namespace }}.svc
        image: "{{ .Values.common.images.provider }}/{{ .Values.common.images.sgadmin_base_image }}:{{ .Values.common.elkversion }}-{{ .Values.common.sgversion }}"
        imagePullPolicy: {{ .Values.common.pullPolicy }}
        command:
          - sh
          - -c
          - |
              #!/usr/bin/env bash -e
              while kubectl get pods --selector=role=master -o jsonpath='{range .items[*]}{.status.containerStatuses[*]}{"\n"}{end}'|sed 's/"//g'|grep 'ready:false'; do
                echo 'Wait for $DISCOVERY_SERVICE service to be ready';
                sleep 10 ;
              done
              echo "Getting password for admin user"
              export ADMIN_PWD=$(kubectl get secrets {{ template "fullname" . }}-passwd-secret -o jsonpath="{.data.SG_ADMIN_PWD}" | base64 -d)
              echo "Disabling shard allocation in ES cluster to https://{{ template "fullname" . }}-clients.default.svc:9200 "
              curl --fail -u admin:$ADMIN_PWD -k -X PUT "https://{{ template "fullname" . }}-clients.default.svc:9200/_cluster/settings?pretty" -H 'Content-Type: application/json' -d'
              {
              "persistent": {
                "cluster.routing.allocation.enable": "none",
                "cluster.routing.rebalance.enable" : "none"
              }
              }
              '
              RET=$?
              echo "Result $RET"
              exit $RET
        resources:
          limits:
            cpu: "500m"
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 256Mi
        volumeMounts:
          - name: secret-volume
            readOnly: true
            mountPath: /root/sgcerts/
          - name: kubectl
            subPath: kubectl
            mountPath: /usr/local/bin/kubectl
      volumes:
        - name: secret-volume
          secret:
            secretName: {{ template "fullname" . }}-admin-cert-secret
        - name: kubectl
          emptyDir: {}
{{ end }}